name: üè• Self-Healing Austentel Deploy
on: 
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: üè• Self-Healing Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
    
    - name: üè• Self-Healing Deploy
      run: |
        set -e
        
        # Configuration
        RESOURCE_GROUP="${RESOURCE_GROUP}"
        REGISTRY_NAME="${REGISTRY_NAME}"
        REGISTRY_LOGIN_SERVER="${REGISTRY_LOGIN_SERVER}"
        CONTAINER_NAME="austentel-acs"
        MAX_RETRIES=5
        
        # Retry function with exponential backoff
        retry_with_backoff() {
            local operation=$1
            local command=$2
            local max_attempts=${3:-$MAX_RETRIES}
            
            for attempt in $(seq 1 $max_attempts); do
                echo "üîÑ Attempting $operation (try $attempt/$max_attempts)"
                
                if eval "$command"; then
                    echo "‚úÖ $operation succeeded on attempt $attempt"
                    return 0
                else
                    if [ $attempt -eq $max_attempts ]; then
                        echo "‚ùå $operation failed after $max_attempts attempts"
                        return 1
                    fi
                    
                    local delay=$((10 * (2 ** (attempt - 1))))
                    echo "‚è≥ Retrying in ${delay}s..."
                    sleep $delay
                fi
            done
        }
        
        # Enhanced health check
        check_container_health() {
            local ip=$1
            local max_checks=12
            
            for i in $(seq 1 $max_checks); do
                echo "üß™ Health check $i/$max_checks for $ip"
                
                if curl -f --max-time 15 "http://$ip/health" >/dev/null 2>&1; then
                    echo "‚úÖ Health endpoint responding"
                    return 0
                elif curl -f --max-time 15 "http://$ip/api/health" >/dev/null 2>&1; then
                    echo "‚úÖ API health endpoint responding"
                    return 0
                elif curl -f --max-time 15 "http://$ip/" >/dev/null 2>&1; then
                    echo "‚úÖ Application responding"
                    return 0
                else
                    echo "‚è≥ Attempt $i/$max_checks..."
                    sleep 20
                fi
            done
            
            echo "‚ùå Health checks failed"
            return 1
        }
        
        echo "üîß Ensuring providers registered..."
        retry_with_backoff "Provider registration" \
            "az provider register --namespace Microsoft.ContainerInstance --wait" 3
        
        echo "üîç Checking existing container health..."
        CONTAINER_STATE=$(az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --query instanceView.state --output tsv 2>/dev/null || echo "NotFound")
        
        if [ "$CONTAINER_STATE" = "Running" ]; then
          CONTAINER_IP=$(az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --query ipAddress.ip --output tsv)
          echo "üß™ Testing existing container at $CONTAINER_IP..."
          
          if check_container_health "$CONTAINER_IP"; then
            echo "‚úÖ Container healthy - SKIPPING DEPLOYMENT"
            echo "üåê Access at: http://$CONTAINER_IP"
            exit 0
          else
            echo "‚ö†Ô∏è Container unhealthy - proceeding with redeployment"
          fi
        fi
        
        echo "üîê Logging into registry..."
        retry_with_backoff "Registry login" "az acr login --name $REGISTRY_NAME"
        
        echo "üèóÔ∏è Building image..."
        retry_with_backoff "Image build" \
            "docker build -t $REGISTRY_LOGIN_SERVER/austentel:latest ."
        
        echo "üì§ Pushing image..."
        retry_with_backoff "Image push" \
            "docker push $REGISTRY_LOGIN_SERVER/austentel:latest"
        
        echo "üóëÔ∏è Removing old container..."
        retry_with_backoff "Container deletion" \
            "az container delete --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --yes" 3
        sleep 25
        
        echo "üè• Creating self-healing container..."
        retry_with_backoff "Container creation" \
            "az container create \
              --resource-group $RESOURCE_GROUP \
              --name $CONTAINER_NAME \
              --image $REGISTRY_LOGIN_SERVER/austentel:latest \
              --registry-login-server $REGISTRY_LOGIN_SERVER \
              --registry-username ${{ secrets.REGISTRY_USERNAME }} \
              --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
              --ports 80 \
              --protocol TCP \
              --cpu 1 \
              --memory 1.5 \
              --ip-address Public \
              --restart-policy Always \
              --location eastus \
              --environment-variables NODE_ENV=production HEALTH_CHECK_ENABLED=true"
        
        echo "‚è≥ Waiting for container startup..."
        sleep 90
        
        CONTAINER_IP=$(az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --query ipAddress.ip --output tsv)
        echo "üìç Container IP: $CONTAINER_IP"
        
        echo "üè• Running comprehensive health checks..."
        if check_container_health "$CONTAINER_IP"; then
            echo "üéâ SELF-HEALING DEPLOYMENT COMPLETE!"
            echo "üåê Access: http://$CONTAINER_IP"
            echo "üè• Health monitoring: http://$CONTAINER_IP/health"
        else
            echo "‚ùå Deployment validation failed"
            exit 1
        fi
