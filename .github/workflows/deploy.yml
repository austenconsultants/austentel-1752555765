name: üõ°Ô∏è Bulletproof Austentel Deploy
on: 
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: üõ°Ô∏è Bulletproof Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
    
    - name: üõ°Ô∏è Bulletproof Deploy with Provider Fallbacks
      run: |
        set -e
        
        # Configuration
        RESOURCE_GROUP="${RESOURCE_GROUP}"
        REGISTRY_NAME="${REGISTRY_NAME}"
        REGISTRY_LOGIN_SERVER="${REGISTRY_LOGIN_SERVER}"
        DEPLOYMENT_METHOD="${DEPLOYMENT_METHOD}"
        
        # Enhanced retry function
        retry_with_backoff() {
            local operation=$1
            local command=$2
            local max_attempts=${3:-5}
            
            for attempt in $(seq 1 $max_attempts); do
                echo "üîÑ Attempting $operation (try $attempt/$max_attempts)"
                
                if eval "$command"; then
                    echo "‚úÖ $operation succeeded"
                    return 0
                else
                    if [ $attempt -eq $max_attempts ]; then
                        echo "‚ùå $operation failed after $max_attempts attempts"
                        return 1
                    fi
                    sleep $((10 * attempt))
                fi
            done
        }
        
        # Bulletproof provider registration
        echo "üõ°Ô∏è Bulletproof provider registration..."
        
        REQUIRED_PROVIDERS=("Microsoft.ContainerInstance" "Microsoft.ContainerRegistry" "Microsoft.Network" "Microsoft.Web")
        FAILED_PROVIDERS=()
        
        for provider in "${REQUIRED_PROVIDERS[@]}"; do
            echo "üîç Checking provider: $provider"
            
            if az provider show --namespace "$provider" --query registrationState --output tsv | grep -q "Registered"; then
                echo "‚úÖ $provider already registered"
                continue
            fi
            
            echo "üîß Registering $provider..."
            if az provider register --namespace "$provider" 2>/dev/null; then
                echo "‚úÖ $provider registration initiated"
                
                # Wait for registration with timeout
                timeout=300
                while [ $timeout -gt 0 ]; do
                    if az provider show --namespace "$provider" --query registrationState --output tsv | grep -q "Registered"; then
                        echo "‚úÖ $provider registered successfully"
                        break
                    fi
                    sleep 10
                    timeout=$((timeout - 10))
                done
            else
                echo "‚ö†Ô∏è Failed to register $provider - adding to fallback list"
                FAILED_PROVIDERS+=("$provider")
            fi
        done
        
        # Determine deployment method based on available providers
        if [[ " ${FAILED_PROVIDERS[*]} " =~ " Microsoft.ContainerInstance " ]]; then
            if [[ " ${FAILED_PROVIDERS[*]} " =~ " Microsoft.Web " ]]; then
                echo "üõ°Ô∏è Both Container Instance and App Service unavailable - manual intervention needed"
                exit 1
            else
                echo "üõ°Ô∏è Using App Service deployment (Container Instance unavailable)"
                DEPLOYMENT_METHOD="app_service"
            fi
        fi
        
        echo "üîê Registry login..."
        retry_with_backoff "Registry login" "az acr login --name $REGISTRY_NAME"
        
        echo "üèóÔ∏è Building and pushing image..."
        retry_with_backoff "Image build" "docker build -t $REGISTRY_LOGIN_SERVER/austentel:latest ."
        retry_with_backoff "Image push" "docker push $REGISTRY_LOGIN_SERVER/austentel:latest"
        
        # Deploy based on method
        case $DEPLOYMENT_METHOD in
            "container_instance")
                echo "üöÄ Deploying to Container Instance..."
                
                # Remove old container
                echo "üóëÔ∏è Cleaning old container..."
                az container delete --resource-group $RESOURCE_GROUP --name austentel-acs --yes || true
                sleep 30
                
                # Create new container
                retry_with_backoff "Container creation" \
                    "az container create \
                      --resource-group $RESOURCE_GROUP \
                      --name austentel-acs \
                      --image $REGISTRY_LOGIN_SERVER/austentel:latest \
                      --registry-login-server $REGISTRY_LOGIN_SERVER \
                      --registry-username ${{ secrets.REGISTRY_USERNAME }} \
                      --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
                      --ports 80 \
                      --protocol TCP \
                      --cpu 1 \
                      --memory 1.5 \
                      --ip-address Public \
                      --restart-policy Always \
                      --location eastus \
                      --environment-variables NODE_ENV=production"
                
                sleep 90
                CONTAINER_IP=$(az container show --resource-group $RESOURCE_GROUP --name austentel-acs --query ipAddress.ip --output tsv)
                echo "üìç Container deployed at: $CONTAINER_IP"
                ;;
                
            "app_service")
                echo "üõ°Ô∏è Deploying to App Service..."
                
                # Configure container deployment
                retry_with_backoff "App Service container config" \
                    "az webapp config container set \
                      --name app-austentel-* \
                      --resource-group $RESOURCE_GROUP \
                      --docker-custom-image-name $REGISTRY_LOGIN_SERVER/austentel:latest \
                      --docker-registry-server-url https://$REGISTRY_LOGIN_SERVER \
                      --docker-registry-server-user ${{ secrets.REGISTRY_USERNAME }} \
                      --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }}"
                
                # Restart app service
                retry_with_backoff "App Service restart" \
                    "az webapp restart --name app-austentel-* --resource-group $RESOURCE_GROUP"
                
                WEBAPP_URL=$(az webapp show --name app-austentel-* --resource-group $RESOURCE_GROUP --query defaultHostName --output tsv)
                echo "üìç App Service deployed at: https://$WEBAPP_URL"
                ;;
        esac
        
        echo "üéâ BULLETPROOF DEPLOYMENT COMPLETE!"
