name: 🧠 Intelligent Austentel Deploy
on: 
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: 🚀 Intelligent Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
    
    - name: 🧠 Intelligent Build and Deploy
      run: |
        set -e
        
        RESOURCE_GROUP="rg-austentel-1752555765"
        REGISTRY_NAME="acr555765"
        REGISTRY_LOGIN_SERVER="acr555765.azurecr.io"
        CONTAINER_NAME="austentel-acs"
        
        echo "🔧 Ensuring providers are registered..."
        az provider register --namespace Microsoft.ContainerInstance --wait || true
        
        echo "🔍 Checking existing container..."
        CONTAINER_STATE=$(az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --query instanceView.state --output tsv 2>/dev/null || echo "NotFound")
        
        if [ "$CONTAINER_STATE" = "Running" ]; then
          CONTAINER_IP=$(az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --query ipAddress.ip --output tsv)
          echo "🧪 Testing existing container at $CONTAINER_IP..."
          
          if curl -f --max-time 10 http://$CONTAINER_IP/health >/dev/null 2>&1 || curl -f --max-time 10 http://$CONTAINER_IP/ >/dev/null 2>&1; then
            echo "✅ Container is healthy and working!"
            echo "🌐 Access at: http://$CONTAINER_IP"
            echo "⏩ Skipping deployment - container already working perfectly"
            exit 0
          else
            echo "⚠️ Container exists but not responding - will recreate"
          fi
        fi
        
        echo "🔐 Logging into registry..."
        az acr login --name $REGISTRY_NAME
        
        echo "🏗️ Building Docker image..."
        docker build -t $REGISTRY_LOGIN_SERVER/austentel:latest .
        
        echo "📤 Pushing to registry..."
        docker push $REGISTRY_LOGIN_SERVER/austentel:latest
        
        echo "🗑️ Removing old container..."
        az container delete --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --yes || true
        sleep 15
        
        echo "🚀 Creating new container with fixed parameters..."
        az container create \
          --resource-group $RESOURCE_GROUP \
          --name $CONTAINER_NAME \
          --image $REGISTRY_LOGIN_SERVER/austentel:latest \
          --registry-login-server $REGISTRY_LOGIN_SERVER \
          --registry-username ${{ secrets.REGISTRY_USERNAME }} \
          --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
          --ports 80 \
          --protocol TCP \
          --cpu 1 \
          --memory 1.5 \
          --ip-address Public \
          --restart-policy Always \
          --location eastus \
          --environment-variables NODE_ENV=production
        
        echo "⏳ Waiting for container to start..."
        sleep 45
        
        CONTAINER_IP=$(az container show --resource-group $RESOURCE_GROUP --name $CONTAINER_NAME --query ipAddress.ip --output tsv)
        echo "📍 Container IP: $CONTAINER_IP"
        
        echo "🧪 Testing new deployment..."
        for i in {1..8}; do
          if curl -f --max-time 10 http://$CONTAINER_IP/health >/dev/null 2>&1; then
            echo "✅ Health check passed!"
            break
          elif curl -f --max-time 10 http://$CONTAINER_IP/ >/dev/null 2>&1; then
            echo "✅ Application responding!"
            break
          else
            echo "⏳ Attempt $i/8 - waiting for app to start..."
            sleep 15
          fi
        done
        
        echo "🎉 Intelligent deployment complete!"
        echo "🌐 Access at: http://$CONTAINER_IP"
        echo "🌐 Domain: https://acs1.austentel.com"
